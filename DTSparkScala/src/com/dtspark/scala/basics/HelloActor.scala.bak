package com.dtspark.scala.basics

import scala.actors.Actor

object HelloActor {
  def main(args: Array[String]): Unit = {
    val helloActor = new HelloActor
    helloActor.start()
    
    val helloBackActor = new HelloBackActor(helloActor)
    helloBackActor.start()
    
    
//    var counter = 0
    /*while (true) {
      helloActor ! "Wow" + counter
      counter += 1
      
      Thread.sleep(3000)
    }*/
    
//    helloActor ! Hello("Spark", "Spark means Dollars")
  }
}

case class Hello(name: String,  content: String, sender:Actor)
case class HelloBack(name: String, content: String, sender:Actor)

class HelloActor extends Actor{
  var counter = 0
   def act() {
    while(true){
      receive {
        case content:String => println("Message: " + content)
        case Hello(name, content,sender) => {
          println("HelloActor : " + "name: " + name + " content: " + content + counter)
          counter += 1
          Thread.sleep(3000)
          sender ! HelloBack(name, content+counter, this)
        }
      }
      
    }
  }
}

class HelloBackActor(val helloActor: Actor) extends Actor{
  var counter = 0
  def act() {
    helloActor ! Hello("Spark",  "Love is here", this)
    while(true){
      receive {
        case content:String => println("Message: " + content)
        case HelloBack(name, content,sender) =>  {
          println("HelloBackActor : " + "name: " + name + " content: " + content + counter)
          counter += 1
          Thread.sleep(3000)
          sender ! Hello(name, content+counter, this)
        }
      }
      
    }
  }
}